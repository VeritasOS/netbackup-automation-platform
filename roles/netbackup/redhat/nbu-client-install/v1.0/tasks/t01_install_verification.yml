# $Copyright: Copyright (c) 2024 Veritas Technologies LLC. All rights reserved $

#####################################################################
#### nbu-client-install -> tasks -> t01_install_verification.yml ####
#####################################################################

# Define the install start time as variable
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }}  -> Start NetBackup {{ nbu_playbook_type }}"
  ansible.builtin.set_fact:
    status: "started"
    install_time: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"

# Verify whether the NetBackup client has the NetBackup server software installed
# The install will not be performed if the client is a NetBackup server
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }}  -> Start NetBackup Server Check"
  ansible.builtin.include_role:
    name: 'generic/server_check'

- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Set fact for install-phase"
  set_fact: 
    install_phase: "PRE"

# Set default Artifactory Respository 
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Set Artifactory Repository based on type of environment as Fact"
  ansible.builtin.set_fact:
    artifactory_repo: ""

# Discover Artifactory Respository based on the type of environment
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Define Artifactory Repository based on type of environment"
  block:
    - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Define Artifactory Repository - DEV"
      ansible.builtin.set_fact:
        artifactory_repo: yum-enterprise-dev-local/
      when: "'DEV' in awx_inventory_name"

    - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Define Artifactory Repository - UAT"
      ansible.builtin.set_fact:
        artifactory_repo: yum-enterprise-test-local/
      when: "'UAT' in awx_inventory_name"

    - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Define Artifactory Repository - PROD"
      ansible.builtin.set_fact:
        artifactory_repo: yum-enterprise-prod-local/
      when:
        - "'PROD' in awx_inventory_name"
  when: awx_inventory_name is defined and awx_inventory_name != ""

# Check if the NetBackup yum cache exists
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Check if {{ os_path_nbu_yum_cache }} exists"
  ansible.builtin.stat:
    path: "{{ os_path_nbu_yum_cache }}"
  register: yum_cache_register
  failed_when: false
  changed_when: false

# Remove the contents of the "/var/cache/yum/x86_64/7Server/netbackup" directory
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Remove the NetBackup yum cache directory"
  ansible.builtin.file:
    path: "{{ os_path_nbu_yum_cache }}"
    state: absent
  failed_when: false
  when: ( ansible_distribution_major_version  == '7' and yum_cache_register.stat.exists )

- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Get list of yum repos (to disable them temporarily)"
  ansible.builtin.shell: yum -q repolist |  awk '{print $1}' | egrep -v -i "status|baseos|appstream" | awk -F'/' '{print $1}'
  register: yum_repolist_register
  changed_when: False

- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Set fact list of yum repos (to disable them temporarily)"
  ansible.builtin.set_fact:
      yum_repolist_output_register: "{{ yum_repolist_output_register }}{{ item }},"
  with_items: "{{ yum_repolist_register.stdout_lines }}"
  when: ( item != "repo" ) and ( item[0] != "!" )

- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Remove the trailing special character"
  ansible.builtin.set_fact:
    yum_repolist_output_register: "{{ yum_repolist_output_register[:-1] }}"

# Add NetBackup Client Repo - Enable it
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Add YUM repository for NetBackup Software" 
  ansible.builtin.yum_repository:
    name: netbackup
    description: NetBackup {{ nbu_version }} Client Binaries
    baseurl: "{{ nbu_artifactory_repo_base_url }}{{ artifactory_repo }}{{ nbu_path_repo_base_pkg }}"
    enabled: no
    gpgcheck: no
    state: present
    sslverify: no

# Determine the NetBackup Client installed software version 
- name: "NBU-CLIENT-UPGRADE -> Determine the NetBackup Client installed software version"
  block:
  # Verify whether the NetBackup client has the NetBackup client software installed
  - name: "NBU-CLIENT-UPGRADE -> Verify whether NetBackup client software is currently installed"
    ansible.builtin.shell: ( rpm -qa | grep "{{ nbu_client_rpm_name }}" )
    changed_when: false
    register: nbu_client_rpm_check
    failed_when: false

  # Verify what version of the NetBackup client software is currently installed.
  # Returned version is used to determine whether the NetBackup client sofware requires upgrading.
  - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Verify what version of the NetBackup client software is currently installed"
    ansible.builtin.shell: ( rpm -qi "{{ nbu_client_rpm_name }}" | awk '/Version/ { print $3}' )
    changed_when: false
    register: nbu_client_rpm_version_register
    when:
      - ( nbu_client_rpm_check.rc == 0 )

  when: nbu_playbook_type == "upgrade"

- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Detect if NetBackup Client ({{ nbu_client_rpm_version_register.stdout | default(nbu_version) }}) is currently installed"
  ansible.builtin.set_fact:
    nbu_client_rpm_version: "{{ nbu_client_rpm_version_register.stdout | default(nbu_version) }}"

# Make a note that currrently we only validate NetBackup RPMs where release version equals nbu_version
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Include tasks for NetBackup {{ nbu_playbook_type }} status verification"
  ansible.builtin.include_tasks: t01_{{ nbu_playbook_type }}_status.yml
  loop: "{{ nbu_client_rpms_ordered_list[nbu_client_rpm_version] | dict2items }}"
  when: 
    - (item.key not in ['VRTSpbx', 'VRTSpddea', 'VRTSnbjava', 'VRTSnbjre'])

# Set facts about the NetBackup Client
# Does not run if NetBackup Client software is not installed
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Set facts about the NetBackup client {{ nbu_playbook_type }}"
  ansible.builtin.set_fact:
    nbu_client_name: "{{ inventory_hostname }}"
    nbu_client_version_current: "{{ nbu_client_rpm_version }}"
    nbu_client_version_proposed: "{{ nbu_version }}"
  when:
    - ( nbu_client_rpm_check.rc == 0 ) and ( nbu_client_status == "upgrade" )

# Does not run if NetBackup Client software is not installed
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }}  -> Set facts about the NetBackup client {{ nbu_playbook_type }} "
  ansible.builtin.set_fact:
    nbu_client_name: "{{ inventory_hostname }}"
    nbu_client_version_proposed: "{{ nbu_version }}"
  when:
    - ( nbu_client_status == "install" )

# Display facts about the NetBackup Client
# Does not run if NetBackup Client software is not installed
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Display facts about the NetBackup client {{ nbu_playbook_type }}"
  ansible.builtin.debug:
    msg:
      - "NetBackup Client - Hostname:                         {{ nbu_client_name }}"
      - "NetBackup Client - Action:                           {{ nbu_client_status }}"
      - "NetBackup Client - Version ('Current'):              {{ nbu_client_version_current }}"
      - "NetBackup Client - Version ('New'):                  {{ nbu_client_version_proposed }}"
  when:
    - ( nbu_client_status == "upgrade" )

# Display facts about the NetBackup Client
# Runs only when NetBackup Client software is not installed
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Display facts about the NetBackup client {{ nbu_playbook_type }}"
  ansible.builtin.debug:
    msg:
      - "NetBackup Client - Hostname:                         {{ nbu_client_name }}"
      - "NetBackup Client - Action:                           {{ nbu_client_status }}"
      - "NetBackup Client - Version ('New'):                  {{ nbu_client_version_proposed }}"
  when:
    - ( nbu_client_status == "install" )

- name: Ansible::Log.info
  ansible.builtin.debug:
    msg: "Installed NetBackup client version ({{ nbu_client_rpm_version }}) is up-to-date"
  when: ( nbu_client_status == "none" )

- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Include tasks for space check "
  ansible.builtin.include_tasks: t01_space_check.yml
  when: ( nbu_client_status == "install" ) or ( nbu_client_status == "upgrade" )

# EOF