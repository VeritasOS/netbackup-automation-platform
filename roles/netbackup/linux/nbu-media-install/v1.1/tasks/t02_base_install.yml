# $Copyright: Copyright (c) 2024 Veritas Technologies LLC. All rights reserved $

#########################################################
#### nbu-server-upgrade -> tasks -> t02_base_install ####
#########################################################

# These tasks will upgrade the NetBackup Server software

# Disable all policies and SLPs
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Disable all NetBackup and storage lifecycle policies"
  ansible.builtin.shell:  ( cd {{ os_dir_nbu_backup }} && ./install_prep.pl -deactivate)
  register: result_install_prep_deactivate
  changed_when: false
  when: ( nbu_role == "primary") or ( nbu_role == "master")

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Verify file existence status"
  ansible.builtin.stat:
    path: "{{ netbackup_file }}"
  register: netbackup_files_register
  with_items:
    - "{{ os_file_nbu_bpstart }}"
    - "{{ os_file_nbu_bpdbjobs }}"
    - "{{ os_file_nbu_bpconf }}"
  loop_control:
    loop_var: netbackup_file
  failed_when: false
  changed_when: false

# Stop the NetBackup services
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Stopping NetBackup daemons"
  ansible.builtin.include_role:
    name: 'netbackup/linux/nbu-stop-services'

# Start the NetBackup services
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Start the NetBackup Services" 
  ansible.builtin.shell:  ( {{ os_file_nbu_bpstart }} )
  when: netbackup_files_register.results[0].stat.exists

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Verify running jobs and cancel it"
  block:
    # Cancel any running jobs - None should be running because policies and SLPs are disabled
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Cancel any running jobs"
      ansible.builtin.shell: ( {{ os_file_nbu_bpdbjobs }} -cancel_all)
      changed_when: false

    # Check there're no running jobs - There shouldn't be because policies and SLP are disabled but double check
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check there're no jobs running"
      ansible.builtin.shell: ( {{ os_file_nbu_bpdbjobs }} -summary | grep -v MASTER | awk '{print $2}')
      changed_when: false
      register: nbu_running_jobs_check
      until: nbu_running_jobs_check.stdout | int == 0
      delay: 5
      retries: 30
  when:
    - netbackup_files_register.results[1].stat.exists
    - ( nbu_role == "primary") or ( nbu_role == "master")

 # Update CLIENT and SERVER in the NBInstallAnswer-media-linux.j2 template, when upgrade is being performed
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} ->  Update the CLIENT and SERVER in the NBInstallAnswer-media-linux.j2 template"
  block:
    # Remove "_" from master_01 for machines that were installed where they were unable
    # to reach bravura and defaulted to SERVER = master_01 as Primary Server
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove pseudo NetBackup Primary Server name from bp.conf file - make RFC compliant"
      ansible.builtin.shell: ( sed -i 's/SERVER = master_01/SERVER = master01/g' {{ os_file_nbu_bpconf }} )
      failed_when: false
      changed_when: false

    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Correct all Server entries if found in bp.conf ('Server = '->'SERVER = ')"
      ansible.builtin.replace:
        path: /usr/openv/netbackup/bp.conf
        regexp: 'Server = '
        replace: 'SERVER = '

    # Get the NetBackup primary server hostname from the bp.conf file
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Get Primary Server hostname"
      ansible.builtin.shell: ( cat  {{ os_file_nbu_bpconf }} | egrep -v "^#" | grep SERVER | awk 'NR==1 {print $3}' )
      changed_when: false
      register: nbu_primary_server_register

    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Set SERVER to value from bp.conf"
      ansible.builtin.set_fact:
        nbu_primary_server_ans: "{{ nbu_primary_server_register.stdout }}"
      when: nbu_primary_server_register.stdout != ""

    # Check if bp.conf has more than one CLIENT_NAME entry
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Get the count of machines NetBackup CLIENT_NAME"
      ansible.builtin.shell: ( cat  /usr/openv/netbackup/bp.conf | egrep -v "^#" | grep CLIENT_NAME | awk '{print $3}' | wc -l )
      changed_when: false
      register: nbu_client_name_count_register

    # If multiple entires found, delete all and create just one entry with current inventory_hostname
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Reset all NetBackup CLIENT_NAME entries to one"
      ansible.builtin.shell: ( echo CLIENT_NAME={{ inventory_hostname_short }} | /usr/openv/netbackup/bin/nbsetconfig )
      changed_when: false
      when: nbu_client_name_count_register.stdout | int > 1

    # Get the NetBackup CLIENT_NAME from the bp.conf file
    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Get machines NetBackup CLIENT_NAME"
      ansible.builtin.shell: ( cat {{ os_file_nbu_bpconf }} | egrep -v "^#" | grep CLIENT_NAME | awk 'NR==1 {print $3}' )
      changed_when: false
      register: nbu_client_name_register

    - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Set CLIENT_NAME in NBInstallAnswer-media-linux.j2, to values from bp.conf file"
      ansible.builtin.set_fact:
        nbu_client_name_ans: "{{ nbu_client_name_register.stdout }}"
      when: nbu_client_name_register.stdout != ""
      
  when: netbackup_files_register.results[2].stat.exists and nbu_playbook_type == "upgrade"

  # Upload NetBackup Customer Registration File
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Upload NetBackup Customer Registration File"
  ansible.builtin.copy:
    src: "{{ os_file_custreg }}"
    dest: "{{ os_dir_nbu_custreg }}"
  when: ( nbu_role == "primary") or ( nbu_role == "master")

# Upload NetBackup answer file ("Primary Server")
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Upload NetBackup Install Answer File ('Primary Server')"
  ansible.builtin.template:
    src: "NBInstallAnswer-master-{{ nbu_version }}.j2"
    dest: "/tmp/NBInstallAnswer.conf"
    mode: 0755
  when: ( nbu_role == "primary") or ( nbu_role == "master")

# Upload NetBackup answer file ("Media Server")
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Upload NetBackup Install Answer File ('Media Server')"
  ansible.builtin.template:
    src: "NBInstallAnswer-media-linux.j2"
    dest: "/tmp/NBInstallAnswer.conf"
    mode: 0755
  when: ( nbu_role == "media")

# Update Yum configuration to skip SSL verifcation ("#### VERITAS LAB REQUIREMENT #####")
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Update YUM configuration to skip SSL verificaion on repository"
  ansible.builtin.lineinfile:
    path: /etc/yum.conf
    line: "sslverify=false"
    create: yes
  ignore_errors: true

# Install NetBackup Software - RHEL Server
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> {{ nbu_playbook_type | capitalize }} the NetBackup server software {{ nbu_role|capitalize }} server"
  ansible.builtin.package:
    name:
      - "{{ item.key }}"
    state: latest
    validate_certs: no
    disablerepo: '*'
    enablerepo: netbackup
  register: result
  with_items:
    - "{{ nbu_pkgs_ordered_list[nbu_role][nbu_version] | dict2items  }}"
  when:
    - ansible_os_family == 'RedHat'
    - (item.key not in ['VRTSnbjava', 'VRTSnbjre']) or (item.key in ['VRTSnbjava', 'VRTSnbjre'] and nb_include_java_jre_install)
    - not (result.rc|d(0)) # Make sure that the loop exits if any RPM installation fails. 

# Install NetBackup Software - SUSE Server
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> {{ nbu_playbook_type | capitalize }} the NetBackup server software {{ nbu_role|capitalize }} server"
  zypper:
    name: 
      - "{{ item.key }}"
    state: latest
    disable_gpg_check: no
  register: result
  with_items:
    - "{{ nbu_pkgs_ordered_list[nbu_role][nbu_version] | dict2items }}"
  when:
    - ansible_os_family == 'Suse'
    - item.key not in ['VRTSpddei']
    - (item.key not in ['VRTSpddeu']) or (item.key in ['VRTSpddeu'] and nbu_version is version_compare('10.4.0.0', '>=')) 
    - (item.key not in ['VRTSnbjava', 'VRTSnbjre']) or (item.key in ['VRTSnbjava', 'VRTSnbjre'] and nb_include_java_jre_install)
    - not (result.rc|d(0)) # Make sure that the loop exits if any RPM installation fails.

 # Ensure the NetBackup Server java files are not installed
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove NetBackup {{ nbu_role | capitalize }} Java RPM files if installed by older Ansible package"
  ansible.builtin.yum:
    name:
      - VRTSnbjava
      - VRTSnbjre
    state: absent
    disablerepo: '*'
    enablerepo: netbackup
    cacheonly: "{{ install_pkgs_from_local_cache }}"
  when:
    - ansible_os_family == 'RedHat'
    - not nb_include_java_jre_install

 # Ensure the NetBackup Server java files are not installed
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove NetBackup {{ nbu_role | capitalize }} Java RPM files if installed by older Ansible package"
  zypper:
    name:
      - VRTSnbjava
      - VRTSnbjre
    state: absent
  when:  
    - ansible_os_family == 'Suse'
    - not nb_include_java_jre_install

# Check the NetBackup version is correct.
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check the NetBackup software version"
  ansible.builtin.shell: ( rpm -qi {{ nbu_server_rpm_name }} | awk '/Version/ { print $3}' )
  changed_when: false
  register: nbu_server_rpm_version
  failed_when: nbu_server_rpm_version.stdout != nbu_version

# Remove the previous NetBackup EEB RPM marker files
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove NetBackup EEB RPM Markers"
  ansible.builtin.shell: ( rpm -qa | grep '^VRTSnbeeb\|^VRTSnb-vts2' | while read line; do rpm -e $line; done)
  changed_when: false

# EOF