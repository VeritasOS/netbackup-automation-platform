# $Copyright: Copyright (c) 2025 Veritas Technologies LLC. All rights reserved $

#####################################################################
#### nbu-upgrade-status -> tasks -> t01_upgrade_status.yml ####
#####################################################################

# These tasks will verify the workflow is being executed on a current NetBackup version
# and will determine whether the NetBackup software requires upgrade to new version.
# If the NetBackup software doesnt require upgrade, the upgrade status will exit and no further tasks will be performed.

# The upgrade will not proceed if the NetBackup software is not already installed. 
- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Verify whether NetBackup {{ nbu_role }} software ({{ item.key }}) is currently installed"
  ansible.builtin.shell: ( rpm -qa | grep "{{ item.key }}" )
  changed_when: false
  register: nbu_rpm_check_register
  failed_when: false

# Verify what version of the NetBackup software is currently installed.
# Returned version is used to determine whether the NetBackup sofware requires upgrading.
- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Verify what version of the NetBackup {{ nbu_role }} software ({{ item.key }}) is currently installed"
  ansible.builtin.shell: ( rpm -qi "{{ item.key }}" | awk '/Version/ { print $3}' )
  ignore_errors: true
  changed_when: false
  register: nbu_rpm_version_register
  when:
    - ( nbu_rpm_check_register.rc == 0 )

- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Get the [{{ item.key }}] rpm version from proposed version list"
  ansible.builtin.set_fact:
      rpm_proposed_version: "{{ rpm_data.value }}"
  with_items: "{{ nbu_pkgs_ordered_list[nbu_role][nbu_version] | dict2items }}"
  loop_control:
    loop_var: rpm_data
  when: rpm_data.key == item.key

# Verify if the installed NetBackup version is out-of-date and requires upgrading
# If current version is lower than proposed version, upgrade
- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Verify whether installed NetBackup {{ nbu_role }} version ({{ nbu_rpm_version_register.stdout }}) is out-of-date - Set fact to 'upgrade'"
  ansible.builtin.set_fact:
    nbu_upgrade_counter: "{{ nbu_upgrade_counter | default(0) | int + 1 }}"
  when:
    - ( nbu_rpm_check_register.rc == 0 )
    - nbu_rpm_version_register.stdout is version_compare(rpm_proposed_version,'<')

- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Setting the eventual upgrade status"
  ansible.builtin.set_fact:
    nbu_install_status: upgrade
    nbu_failed_rpms: "{{ nbu_failed_rpms }}{{ item.key }},"
  when: ( nbu_upgrade_counter |int > 0 )

- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Setting the eventual upgrade status"
  ansible.builtin.set_fact:
    nbu_install_status: none
  when:
    - ( nbu_upgrade_counter |int == 0 )
    - install_phase == "PRE"

- name: Ansible::Log.info
  fail:
    msg:  "This machine doesn't have Netackup {{ nbu_role | capitalize }} installed, hence cannot be upgraded, therefore exit immediately."
  when:
    - ( nbu_rpm_check_register.rc == 1 )
    - install_phase == "PRE"

# Verify if the installed NetBackup version is higher than the proposed version. 
- name: "NBU-{{ nbu_role|upper }}-UPGRADE -> Verify if the installed NetBackup {{ nbu_role }} version is compatible for upgrade with ({{ rpm_proposed_version }}) "
  fail:
    msg: This machine has a higher version ({{ nbu_rpm_version_register.stdout }}) installed, therefore exit immediately.
  when: 
    - nbu_rpm_version_register.stdout is version_compare(rpm_proposed_version, '>')
    
# EOF
