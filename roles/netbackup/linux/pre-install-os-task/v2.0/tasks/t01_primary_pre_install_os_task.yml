# $Copyright: Copyright (c) 2025 Veritas Technologies LLC. All rights reserved $

# This workflow will perform pre-upgrade OS tasks

# Set ulimit for nbwebsvc is not set
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Set OS ulimit for nbwebsvc user"
  ansible.builtin.lineinfile:
    dest: '{{ os_file_security_limits }}'
    line: "{{ item }}"
    create: yes
  with_items:
    - "{{ nbu_config_nbwebsvc_limit }}"

- name: Ansible::Log.info
  fail:
    msg: 
    - "The Primary server requires all specified user account elements to proceed with the installation or upgrade." 
    - "nbu_webservices_group: {{ nbu_webservices_group }}"
    - "nbu_services_group: {{ nbu_services_group }}"
    - "nbu_webservices_user: {{ nbu_webservices_user }}"
    - "nbu_services_user: {{ nbu_services_user }}"
  when: 
    - ( nbu_webservices_group | length == 0 ) or ( nbu_services_group | length == 0 ) or ( nbu_webservices_user | length == 0 ) or ( nbu_services_user | length == 0 )

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check if the group exists"
  ansible.builtin.shell: getent group {{ item }}
  with_items:
    - "{{ nbu_webservices_group }}"
    - "{{ nbu_services_group }}"
  register: group_check_results
  failed_when: false

# OS - Configure a new local group for NetBackup Web Services
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Add new local group for NetBackup Web Services Group - {{ nbu_webservices_group }}"
  ansible.builtin.group:
    name: '{{ nbu_webservices_group }}'
    state: present
  when:   
    - group_check_results.results[0].rc != 0

# OS - Configure a new local group for NetBackup Services to run under
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Add new local group for NetBackup Services Group - {{ nbu_services_group }}"
  ansible.builtin.group:
    name: '{{ nbu_services_group }}'
    state: present
  when:   
    - group_check_results.results[1].rc != 0

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check if service and database users exist"
  ansible.builtin.shell: getent passwd {{ item }}
  with_items:
    - "{{ nbu_webservices_user }}"
    - "{{ nbu_services_user }}"
    - "{{ nbu_database_user }}"
  register: user_check_results
  failed_when: false

# OS - Configure a new local group and user for NetBackup Web Services to group
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Add new web service user {{ nbu_webservices_user }} and add it to NetBackup Web Services Group - {{ nbu_webservices_group }}"
  ansible.builtin.user:
    name: '{{ nbu_webservices_user }}'
    comment: NetBackup Web Services
    group: '{{ nbu_webservices_group }}'
  when: 
    - user_check_results.results[0].rc != 0  

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check if user {{ nbu_services_user }} is in secondary group {{ nbu_webservices_group }}"
  ansible.builtin.shell: id -Gn {{ nbu_services_user }} | grep -q {{ nbu_services_group }}
  register: secondarygroup_check_result
  failed_when: false
 
# OS - Configure netbackup service account 
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Create new user for NetBackup Service Account"
  ansible.builtin.user: 
    name: '{{ nbu_services_user }}'
    comment: NetBackup Service Account
    groups: "{{ nbu_services_group }},{{ nbu_webservices_group }}"
  when:
    - user_check_results.results[1].rc != 0
    - secondarygroup_check_result.rc != 0

# OS - Configure netbackup database user account
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Create new  database user {{ nbu_database_user }}for NetBackup Database User Account"
  ansible.builtin.user: 
      name: '{{ nbu_database_user }}'
      comment: NetBackup database user account
  when:  
    - user_check_results.results[2].rc != 0 

# EOF