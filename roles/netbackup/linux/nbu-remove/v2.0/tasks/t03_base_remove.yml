#$Copyright: Copyright (c) 2025 Veritas Technologies LLC. All rights reserved. $

#############################################################
#### nbu-remove -> tasks -> t03_base_remove.yml ####
#############################################################

# Define the install start time as variable
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Start NetBackup Removal Playbook"
  ansible.builtin.set_fact:
    status: "started"
    install_time: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"

# Verify whether the target machine has any other role installed other than the playbook role
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Do not continue if target machine has different role installed other than the playbook role"
  ansible.builtin.include_role:
    name: 'generic/nbu_compatibility'

# Make sure to stop gracefully/forcefully NetBackup processes before removing RPMs
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Stopping NetBackup daemons"
  ansible.builtin.include_role:
    name: 'netbackup/linux/nbu-stop-services'
  
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check if {{ os_path_nbu_log_vxlogcfg }} exists"
  stat:
    path: "{{ os_path_nbu_log_vxlogcfg }}"
  register: vxlogcfg_present_register
  changed_when: false
  failed_when: false

- block:
  - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check NB registered with vxlogcfg"
    shell: "{{ os_path_nbu_log_vxlogcfg }} -l | grep 'NB,nb'"
    failed_when: false
    register: vxlogcfg

  - name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} ->  execute {{ os_path_nbu_log_vxlogcfg }} -r -p 51216"
    shell: '{{ os_path_nbu_log_vxlogcfg }} -r -p 51216'
    failed_when: false
    when: vxlogcfg.rc == 0
  when: vxlogcfg_present_register.stat.exists

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }}-> Check if /opt/pdde/pddeuninstall.sh Exists"
  stat:
    path: "/opt/pdde/pddeuninstall.sh"
  register: pddeuninstall_check_register
  changed_when: false
  failed_when: false

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }}-> Check if VRTSnbcfg is removed"
  ansible.builtin.yum:
    name: "{{ nbu_rpm_vrtsnbcfg }}"
    state: absent
    disablerepo: "*"
    enablerepo: netbackup
  when:
  - ansible_os_family == 'RedHat'

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }}-> Check if VRTSnbcfg is removed"
  zypper:
    name: "{{ nbu_rpm_vrtsnbcfg }}"
    state: absent
  when:
  - ansible_os_family == 'Suse'

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Execute /opt/pdde/pddeuninstall.sh -forceclean"
  shell: '/opt/pdde/pddeuninstall.sh -forceclean'
  when: pddeuninstall_check_register.stat.exists
  failed_when: false

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove NetBackup Software RPMs"
  ansible.builtin.yum:
    name: 
      - "{{ item.key }}"
    state: absent
    validate_certs: no
    disablerepo: "*"
    enablerepo: netbackup
  register: result
  with_items:
    - "{{ nbu_pkgs_ordered_list[nbu_role][nbu_version] | dict2items | reverse }}"
  when: 
    - ansible_os_family == 'RedHat'
    - ( item.key not in ['VRTSpbx'] )  
    - not (result.rc|d(0)) # Make sure that the loop exits if any RPM Removal fails.

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove NetBackup Software RPMs"
  zypper:
    name: 
      - "{{ item.key }}"
    state: absent
    disable_gpg_check: no
  register: result
  with_items:
    - "{{ nbu_pkgs_ordered_list[nbu_role][nbu_version] | dict2items | reverse }}"
  when: 
    - ansible_os_family == 'Suse'
    - ( item.key not in ['VRTSpbx', 'VRTSpddei'] )
    - not (result.rc|d(0)) # Make sure that the loop exits if any RPM Removal fails.

# Remove EEB Marker packages here, so not picked up by the VRTSpbx check
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove EEB RPM Markers"
  ansible.builtin.shell: ( rpm -qa | grep {{ nbu_eeb_prefix }} | while read line; do rpm -e $line; done)
  failed_when: false

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Check If VRTSpbx Might Be In Use By Other Veritas Products"
  shell: 'rpm -qa | egrep "SYMC|VRTS" | grep -v {{ nbu_client_rpm_pbx }} | wc -l'
  register: pbx_other_products_check_register
  changed_when: false
  # failed_when: false
  
# Remove the version of VRTSpbx that comes with proposed version, if nothing else is using it.
# wc -l in above statement returns char rather then integer, hence check for "0"
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove {{ nbu_client_rpm_pbx }} If No Other Product Using It"
  ansible.builtin.yum:
    name: "{{ nbu_client_rpm_pbx }}"
    state: absent
    disablerepo: "*"
    enablerepo: netbackup
  when:
  - ansible_os_family == 'RedHat'
  - pbx_other_products_check_register.stdout == "0"

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove {{ nbu_client_rpm_pbx }} If No Other Product Using It"
  zypper:
    name: "{{ nbu_client_rpm_pbx }}"
    state: absent
    disable_gpg_check: no
  when:
  - ansible_os_family == 'Suse'
  - pbx_other_products_check_register.stdout == "0"

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }}-> Check if /usr/openv/analyticscollector/UninstallerData/uninstall_dc.sh Exists"
  stat:
    path: "/usr/openv/analyticscollector/UninstallerData/uninstall_dc.sh"
  register: uninstall_ita_dc_check_register
  changed_when: false
  failed_when: false

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Execute /usr/openv/analyticscollector/UninstallerData/uninstall_dc.sh -r"
  shell: '/usr/openv/analyticscollector/UninstallerData/uninstall_dc.sh -r'
  when: uninstall_ita_dc_check_register.stat.exists
  failed_when: false

# Remove the temporary file from /tmp folder.
- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Remove the nbap_partial_install_detected file from {{ os_path_openv_tmp }} "
  ansible.builtin.file:
     path: "{{ item }}"
     state: absent
  with_items:
    - "{{ os_path_openv_tmp }}/nbap_partial_install_detected"
    - "/tmp/previous_rpm_pkg_install_failed"

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Delete NetBackup files"
  ansible.builtin.shell: ( find {{ item }} -type f | xargs rm -rf )
  with_items: "{{ nbu_directory_list_to_be_removed }}"

- name: "NBU-{{ nbu_role|upper }}-{{ nbu_playbook_type|upper }} -> Delete NetBackup directories except mounted disks"
  ansible.builtin.shell: ( find {{ item }} -type d | xargs rm -rf )
  with_items: "{{ nbu_directory_list_to_be_removed }}"
  failed_when: false 

# EOF