# $Copyright: Copyright (c) 2024 Veritas Technologies LLC. All rights reserved $

##############################################################################
####  Generic tasks to verify OS specification                            ####
####  - OS version compatibility against provided production version      ####
####  - Check existence of OS native dependent packages and install if    ####
####    found missing                                                     ####
##############################################################################

# Verify the OS distribution
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Verify the OS distribution is compatible with NetBackup Client Version"
  ansible.builtin.assert:  
    that: ("ansible_os_family == 'Windows'") or ("ansible_os_family == 'RedHat'")
    success_msg: "PASS - Operating system distribution is compatible - OS distribution: {{ ansible_distribution }}"
    fail_msg: "ERROR - Incompatible OS Distribution - Detected OS Distribution is {{ ansible_distribution }}"
    quiet: true

# Expected result is Red Hat
- name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Expected result is Red Hat"
  block:
  # Verify the OS distribution major release
  # Expected result is Red Hat versions 7, 8 or 9
    - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Verify the OS distribution major version is compatible with NetBackup Version"
      ansible.builtin.assert:  
        that: (ansible_distribution_major_version  == '7') or (ansible_distribution_major_version  == '8') or (ansible_distribution_major_version  == '9')
        success_msg: "PASS - Operating system distribution major version is compatible - OS distribution major version: {{ ansible_distribution_major_version }}"
        fail_msg: "ERROR - Incompatible OS Distribution Major version - Detected OS Distribution Major Version is {{ ansible_distribution_major_version }}"
        quiet: true

    # Special handling of native dependent packages for RHEL 8 & 9
    - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Check for system dependent packages on RHEL"
      block:
        - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Load the native package facts for RHEL"
          ansible.builtin.package_facts:
            manager: auto
          no_log: true

        - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Install native dependent packages {{ os_rhel_system_packages[ansible_distribution_major_version] }} if missing"
          ansible.builtin.yum:
            name: "{{ item }}"
            state: present
          with_items: "{{ missing_packages }}"
          when: missing_packages | length > 0
          vars:
            missing_packages: "{{ os_rhel_system_packages[ansible_distribution_major_version] | difference(ansible_facts.packages.keys()) }}"

        - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Reload the native package facts"
          ansible.builtin.package_facts:
            manager: auto
          no_log: true
        
        - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Verify the existence of native dependent packages {{ os_rhel_system_packages[ansible_distribution_major_version] }}"
          fail:
            msg: "One or more required system packages are not installed: {{ missing_packages }}"
          when: missing_packages | length > 0
          vars:
            missing_packages: "{{ os_rhel_system_packages[ansible_distribution_major_version] | difference(ansible_facts.packages.keys()) }}"

        - name: "NBU-CLIENT-{{ nbu_playbook_type|upper }} -> Create required symbolic link for RHEL. Required steps for RHEL 8/9 only"
          ansible.builtin.file:
            src: '{{ item.src }}'
            dest: '{{ item.dest }}'
            state: link
          with_items: "{{ os_rhel_system_packages_symlink[ansible_distribution_major_version] }}"
      when: (ansible_distribution_major_version  == '8') or (ansible_distribution_major_version  == '9')
  when:
   - ansible_os_family == "RedHat"
   - nbu_playbook_type != "remove"

# EOF